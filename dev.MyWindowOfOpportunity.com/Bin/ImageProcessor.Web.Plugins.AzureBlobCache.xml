<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ImageProcessor.Web.Plugins.AzureBlobCache</name>
    </assembly>
    <members>
        <member name="T:ImageProcessor.Web.Plugins.AzureBlobCache.AzureBlobCache">
            <summary>
            Provides an <see cref="T:ImageProcessor.Web.Caching.IImageCache"/> implementation that uses Azure blob storage.
            The cache is self healing and cleaning.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Plugins.AzureBlobCache.AzureBlobCache.RemoteRegex">
            <summary>
            The regular expression for parsing a remote uri.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Plugins.AzureBlobCache.AzureBlobCache.AssemblyVersion">
            <summary>
            The assembly version.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Plugins.AzureBlobCache.AzureBlobCache.cloudCachedBlobClient">
            <summary>
            The cloud blob client, thread-safe so can be re-used
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Plugins.AzureBlobCache.AzureBlobCache.cloudCachedBlobContainer">
            <summary>
            The cloud cached blob container.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Plugins.AzureBlobCache.AzureBlobCache.cloudSourceBlobContainer">
            <summary>
            The cloud source blob container.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Plugins.AzureBlobCache.AzureBlobCache.cachedCdnRoot">
            <summary>
            The cached root url for a content delivery network.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Plugins.AzureBlobCache.AzureBlobCache.streamCachedImage">
            <summary>
            Determines if the CDN request is redirected or rewritten
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Plugins.AzureBlobCache.AzureBlobCache.timeout">
            <summary>
            The timeout length for requesting the CDN url.
            </summary>
        </member>
        <member name="F:ImageProcessor.Web.Plugins.AzureBlobCache.AzureBlobCache.cachedRewritePath">
            <summary>
            The cached rewrite path.
            </summary>
        </member>
        <member name="M:ImageProcessor.Web.Plugins.AzureBlobCache.AzureBlobCache.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Web.Plugins.AzureBlobCache.AzureBlobCache"/> class.
            </summary>
            <param name="requestPath">
            The request path for the image.
            </param>
            <param name="fullPath">
            The full path for the image.
            </param>
            <param name="querystring">
            The query string containing instructions.
            </param>
        </member>
        <member name="M:ImageProcessor.Web.Plugins.AzureBlobCache.AzureBlobCache.IsNewOrUpdatedAsync">
            <summary>
            Gets a value indicating whether the image is new or updated in an asynchronous manner.
            </summary>
            <returns>
            The asynchronous <see cref="T:System.Threading.Tasks.Task"/> returning the value.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Plugins.AzureBlobCache.AzureBlobCache.AddImageToCacheAsync(System.IO.Stream,System.String)">
            <summary>
            Adds the image to the cache in an asynchronous manner.
            </summary>
            <param name="stream">
            The stream containing the image data.
            </param>
            <param name="contentType">
            The content type of the image.
            </param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> representing an asynchronous operation.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Plugins.AzureBlobCache.AzureBlobCache.TrimCacheAsync">
            <summary>
            Trims the cache of any expired items in an asynchronous manner.
            </summary>
            <returns>
            The asynchronous <see cref="T:System.Threading.Tasks.Task"/> representing an asynchronous operation.
            </returns>
        </member>
        <member name="M:ImageProcessor.Web.Plugins.AzureBlobCache.AzureBlobCache.RewritePath(System.Web.HttpContext)">
            <summary>
            Rewrites the path to point to the cached image.
            </summary>
            <param name="context">
            The <see cref="T:System.Web.HttpContext"/> encapsulating all information about the request.
            </param>
        </member>
        <member name="M:ImageProcessor.Web.Plugins.AzureBlobCache.AzureBlobCache.IsUpdatedAsync(System.DateTime)">
            <summary>
            Returns a value indicating whether the requested image has been updated.
            </summary>
            <param name="creationDate">The creation date.</param>
            <returns>The <see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:ImageProcessor.Web.Plugins.AzureBlobCache.AzureBlobCache.TrySetIfModifiedSinceDate(System.Web.HttpContext,System.Net.HttpWebRequest)">
            <summary>
            Tries to set IfModifiedSince header however this crashes when context.Request.Headers["If-Modified-Since"] exists,
            but cannot be parsed. It cannot be parsed when it comes from Google Bot as UTC <example>Sun, 27 Nov 2016 20:01:45 UTC</example>
            so DateTime.TryParse. If it returns false, then log the error.
            </summary>
            <param name="context">The current context</param>
            <param name="request">The current request</param>
        </member>
        <member name="M:ImageProcessor.Web.Plugins.AzureBlobCache.AzureBlobCache.CreateContainer(Microsoft.WindowsAzure.Storage.Blob.CloudBlobClient,System.String,Microsoft.WindowsAzure.Storage.Blob.BlobContainerPublicAccessType)">
            <summary>
            Returns the cache container, creating a new one if none exists.
            </summary>
            <param name="cloudBlobClient"><see cref="T:Microsoft.WindowsAzure.Storage.Blob.CloudBlobClient"/> where the container is stored.</param>
            <param name="containerName">The name of the container.</param>
            <param name="accessType"><see cref="T:Microsoft.WindowsAzure.Storage.Blob.BlobContainerPublicAccessType"/> indicating the access permissions.</param>
            <returns>The <see cref="T:Microsoft.WindowsAzure.Storage.Blob.CloudBlobContainer"/></returns>
        </member>
    </members>
</doc>
