'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="MWoO_01")>  _
Partial Public Class linq2SqlDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertcmsPropertyTypeGroup(instance As cmsPropertyTypeGroup)
    End Sub
  Partial Private Sub UpdatecmsPropertyTypeGroup(instance As cmsPropertyTypeGroup)
    End Sub
  Partial Private Sub DeletecmsPropertyTypeGroup(instance As cmsPropertyTypeGroup)
    End Sub
  Partial Private Sub InsertcmsPropertyType(instance As cmsPropertyType)
    End Sub
  Partial Private Sub UpdatecmsPropertyType(instance As cmsPropertyType)
    End Sub
  Partial Private Sub DeletecmsPropertyType(instance As cmsPropertyType)
    End Sub
  Partial Private Sub InsertcmsPropertyData(instance As cmsPropertyData)
    End Sub
  Partial Private Sub UpdatecmsPropertyData(instance As cmsPropertyData)
    End Sub
  Partial Private Sub DeletecmsPropertyData(instance As cmsPropertyData)
    End Sub
  Partial Private Sub InsertcmsContentXml(instance As cmsContentXml)
    End Sub
  Partial Private Sub UpdatecmsContentXml(instance As cmsContentXml)
    End Sub
  Partial Private Sub DeletecmsContentXml(instance As cmsContentXml)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("umbracoDbDSN").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property cmsPropertyTypeGroups() As System.Data.Linq.Table(Of cmsPropertyTypeGroup)
		Get
			Return Me.GetTable(Of cmsPropertyTypeGroup)
		End Get
	End Property
	
	Public ReadOnly Property cmsPropertyTypes() As System.Data.Linq.Table(Of cmsPropertyType)
		Get
			Return Me.GetTable(Of cmsPropertyType)
		End Get
	End Property
	
	Public ReadOnly Property cmsPropertyDatas() As System.Data.Linq.Table(Of cmsPropertyData)
		Get
			Return Me.GetTable(Of cmsPropertyData)
		End Get
	End Property
	
	Public ReadOnly Property cmsContentXmls() As System.Data.Linq.Table(Of cmsContentXml)
		Get
			Return Me.GetTable(Of cmsContentXml)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.cmsPropertyTypeGroup")>  _
Partial Public Class cmsPropertyTypeGroup
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _contenttypeNodeId As Integer
	
	Private _text As String
	
	Private _sortorder As Integer
	
	Private _uniqueID As System.Guid
	
	Private _cmsPropertyTypes As EntitySet(Of cmsPropertyType)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OncontenttypeNodeIdChanging(value As Integer)
    End Sub
    Partial Private Sub OncontenttypeNodeIdChanged()
    End Sub
    Partial Private Sub OntextChanging(value As String)
    End Sub
    Partial Private Sub OntextChanged()
    End Sub
    Partial Private Sub OnsortorderChanging(value As Integer)
    End Sub
    Partial Private Sub OnsortorderChanged()
    End Sub
    Partial Private Sub OnuniqueIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnuniqueIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._cmsPropertyTypes = New EntitySet(Of cmsPropertyType)(AddressOf Me.attach_cmsPropertyTypes, AddressOf Me.detach_cmsPropertyTypes)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_contenttypeNodeId", DbType:="Int NOT NULL")>  _
	Public Property contenttypeNodeId() As Integer
		Get
			Return Me._contenttypeNodeId
		End Get
		Set
			If ((Me._contenttypeNodeId = value)  _
						= false) Then
				Me.OncontenttypeNodeIdChanging(value)
				Me.SendPropertyChanging
				Me._contenttypeNodeId = value
				Me.SendPropertyChanged("contenttypeNodeId")
				Me.OncontenttypeNodeIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_text", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property text() As String
		Get
			Return Me._text
		End Get
		Set
			If (String.Equals(Me._text, value) = false) Then
				Me.OntextChanging(value)
				Me.SendPropertyChanging
				Me._text = value
				Me.SendPropertyChanged("text")
				Me.OntextChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sortorder", DbType:="Int NOT NULL")>  _
	Public Property sortorder() As Integer
		Get
			Return Me._sortorder
		End Get
		Set
			If ((Me._sortorder = value)  _
						= false) Then
				Me.OnsortorderChanging(value)
				Me.SendPropertyChanging
				Me._sortorder = value
				Me.SendPropertyChanged("sortorder")
				Me.OnsortorderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_uniqueID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property uniqueID() As System.Guid
		Get
			Return Me._uniqueID
		End Get
		Set
			If ((Me._uniqueID = value)  _
						= false) Then
				Me.OnuniqueIDChanging(value)
				Me.SendPropertyChanging
				Me._uniqueID = value
				Me.SendPropertyChanged("uniqueID")
				Me.OnuniqueIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="cmsPropertyTypeGroup_cmsPropertyType", Storage:="_cmsPropertyTypes", ThisKey:="id", OtherKey:="propertyTypeGroupId")>  _
	Public Property cmsPropertyTypes() As EntitySet(Of cmsPropertyType)
		Get
			Return Me._cmsPropertyTypes
		End Get
		Set
			Me._cmsPropertyTypes.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_cmsPropertyTypes(ByVal entity As cmsPropertyType)
		Me.SendPropertyChanging
		entity.cmsPropertyTypeGroup = Me
	End Sub
	
	Private Sub detach_cmsPropertyTypes(ByVal entity As cmsPropertyType)
		Me.SendPropertyChanging
		entity.cmsPropertyTypeGroup = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.cmsPropertyType")>  _
Partial Public Class cmsPropertyType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _dataTypeId As Integer
	
	Private _contentTypeId As Integer
	
	Private _propertyTypeGroupId As System.Nullable(Of Integer)
	
	Private _Alias As String
	
	Private _Name As String
	
	Private _sortOrder As Integer
	
	Private _mandatory As Boolean
	
	Private _validationRegExp As String
	
	Private _Description As String
	
	Private _uniqueID As System.Guid
	
	Private _cmsPropertyDatas As EntitySet(Of cmsPropertyData)
	
	Private _cmsPropertyTypeGroup As EntityRef(Of cmsPropertyTypeGroup)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OndataTypeIdChanging(value As Integer)
    End Sub
    Partial Private Sub OndataTypeIdChanged()
    End Sub
    Partial Private Sub OncontentTypeIdChanging(value As Integer)
    End Sub
    Partial Private Sub OncontentTypeIdChanged()
    End Sub
    Partial Private Sub OnpropertyTypeGroupIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnpropertyTypeGroupIdChanged()
    End Sub
    Partial Private Sub OnAliasChanging(value As String)
    End Sub
    Partial Private Sub OnAliasChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnsortOrderChanging(value As Integer)
    End Sub
    Partial Private Sub OnsortOrderChanged()
    End Sub
    Partial Private Sub OnmandatoryChanging(value As Boolean)
    End Sub
    Partial Private Sub OnmandatoryChanged()
    End Sub
    Partial Private Sub OnvalidationRegExpChanging(value As String)
    End Sub
    Partial Private Sub OnvalidationRegExpChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnuniqueIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnuniqueIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._cmsPropertyDatas = New EntitySet(Of cmsPropertyData)(AddressOf Me.attach_cmsPropertyDatas, AddressOf Me.detach_cmsPropertyDatas)
		Me._cmsPropertyTypeGroup = CType(Nothing, EntityRef(Of cmsPropertyTypeGroup))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dataTypeId", DbType:="Int NOT NULL")>  _
	Public Property dataTypeId() As Integer
		Get
			Return Me._dataTypeId
		End Get
		Set
			If ((Me._dataTypeId = value)  _
						= false) Then
				Me.OndataTypeIdChanging(value)
				Me.SendPropertyChanging
				Me._dataTypeId = value
				Me.SendPropertyChanged("dataTypeId")
				Me.OndataTypeIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_contentTypeId", DbType:="Int NOT NULL")>  _
	Public Property contentTypeId() As Integer
		Get
			Return Me._contentTypeId
		End Get
		Set
			If ((Me._contentTypeId = value)  _
						= false) Then
				Me.OncontentTypeIdChanging(value)
				Me.SendPropertyChanging
				Me._contentTypeId = value
				Me.SendPropertyChanged("contentTypeId")
				Me.OncontentTypeIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_propertyTypeGroupId", DbType:="Int")>  _
	Public Property propertyTypeGroupId() As System.Nullable(Of Integer)
		Get
			Return Me._propertyTypeGroupId
		End Get
		Set
			If (Me._propertyTypeGroupId.Equals(value) = false) Then
				If Me._cmsPropertyTypeGroup.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnpropertyTypeGroupIdChanging(value)
				Me.SendPropertyChanging
				Me._propertyTypeGroupId = value
				Me.SendPropertyChanged("propertyTypeGroupId")
				Me.OnpropertyTypeGroupIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Alias", Storage:="_Alias", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property [Alias]() As String
		Get
			Return Me._Alias
		End Get
		Set
			If (String.Equals(Me._Alias, value) = false) Then
				Me.OnAliasChanging(value)
				Me.SendPropertyChanging
				Me._Alias = value
				Me.SendPropertyChanged("[Alias]")
				Me.OnAliasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(255)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sortOrder", DbType:="Int NOT NULL")>  _
	Public Property sortOrder() As Integer
		Get
			Return Me._sortOrder
		End Get
		Set
			If ((Me._sortOrder = value)  _
						= false) Then
				Me.OnsortOrderChanging(value)
				Me.SendPropertyChanging
				Me._sortOrder = value
				Me.SendPropertyChanged("sortOrder")
				Me.OnsortOrderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_mandatory", DbType:="Bit NOT NULL")>  _
	Public Property mandatory() As Boolean
		Get
			Return Me._mandatory
		End Get
		Set
			If ((Me._mandatory = value)  _
						= false) Then
				Me.OnmandatoryChanging(value)
				Me.SendPropertyChanging
				Me._mandatory = value
				Me.SendPropertyChanged("mandatory")
				Me.OnmandatoryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_validationRegExp", DbType:="NVarChar(255)")>  _
	Public Property validationRegExp() As String
		Get
			Return Me._validationRegExp
		End Get
		Set
			If (String.Equals(Me._validationRegExp, value) = false) Then
				Me.OnvalidationRegExpChanging(value)
				Me.SendPropertyChanging
				Me._validationRegExp = value
				Me.SendPropertyChanged("validationRegExp")
				Me.OnvalidationRegExpChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(2000)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_uniqueID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property uniqueID() As System.Guid
		Get
			Return Me._uniqueID
		End Get
		Set
			If ((Me._uniqueID = value)  _
						= false) Then
				Me.OnuniqueIDChanging(value)
				Me.SendPropertyChanging
				Me._uniqueID = value
				Me.SendPropertyChanged("uniqueID")
				Me.OnuniqueIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="cmsPropertyType_cmsPropertyData", Storage:="_cmsPropertyDatas", ThisKey:="id", OtherKey:="propertytypeid")>  _
	Public Property cmsPropertyDatas() As EntitySet(Of cmsPropertyData)
		Get
			Return Me._cmsPropertyDatas
		End Get
		Set
			Me._cmsPropertyDatas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="cmsPropertyTypeGroup_cmsPropertyType", Storage:="_cmsPropertyTypeGroup", ThisKey:="propertyTypeGroupId", OtherKey:="id", IsForeignKey:=true)>  _
	Public Property cmsPropertyTypeGroup() As cmsPropertyTypeGroup
		Get
			Return Me._cmsPropertyTypeGroup.Entity
		End Get
		Set
			Dim previousValue As cmsPropertyTypeGroup = Me._cmsPropertyTypeGroup.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._cmsPropertyTypeGroup.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._cmsPropertyTypeGroup.Entity = Nothing
					previousValue.cmsPropertyTypes.Remove(Me)
				End If
				Me._cmsPropertyTypeGroup.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.cmsPropertyTypes.Add(Me)
					Me._propertyTypeGroupId = value.id
				Else
					Me._propertyTypeGroupId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("cmsPropertyTypeGroup")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_cmsPropertyDatas(ByVal entity As cmsPropertyData)
		Me.SendPropertyChanging
		entity.cmsPropertyType = Me
	End Sub
	
	Private Sub detach_cmsPropertyDatas(ByVal entity As cmsPropertyData)
		Me.SendPropertyChanging
		entity.cmsPropertyType = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.cmsPropertyData")>  _
Partial Public Class cmsPropertyData
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _contentNodeId As Integer
	
	Private _versionId As System.Nullable(Of System.Guid)
	
	Private _propertytypeid As Integer
	
	Private _dataInt As System.Nullable(Of Integer)
	
	Private _dataDate As System.Nullable(Of Date)
	
	Private _dataNvarchar As String
	
	Private _dataNtext As String
	
	Private _dataDecimal As System.Nullable(Of Decimal)
	
	Private _cmsPropertyType As EntityRef(Of cmsPropertyType)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OncontentNodeIdChanging(value As Integer)
    End Sub
    Partial Private Sub OncontentNodeIdChanged()
    End Sub
    Partial Private Sub OnversionIdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnversionIdChanged()
    End Sub
    Partial Private Sub OnpropertytypeidChanging(value As Integer)
    End Sub
    Partial Private Sub OnpropertytypeidChanged()
    End Sub
    Partial Private Sub OndataIntChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OndataIntChanged()
    End Sub
    Partial Private Sub OndataDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OndataDateChanged()
    End Sub
    Partial Private Sub OndataNvarcharChanging(value As String)
    End Sub
    Partial Private Sub OndataNvarcharChanged()
    End Sub
    Partial Private Sub OndataNtextChanging(value As String)
    End Sub
    Partial Private Sub OndataNtextChanged()
    End Sub
    Partial Private Sub OndataDecimalChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OndataDecimalChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._cmsPropertyType = CType(Nothing, EntityRef(Of cmsPropertyType))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_contentNodeId", DbType:="Int NOT NULL")>  _
	Public Property contentNodeId() As Integer
		Get
			Return Me._contentNodeId
		End Get
		Set
			If ((Me._contentNodeId = value)  _
						= false) Then
				Me.OncontentNodeIdChanging(value)
				Me.SendPropertyChanging
				Me._contentNodeId = value
				Me.SendPropertyChanged("contentNodeId")
				Me.OncontentNodeIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_versionId", DbType:="UniqueIdentifier")>  _
	Public Property versionId() As System.Nullable(Of System.Guid)
		Get
			Return Me._versionId
		End Get
		Set
			If (Me._versionId.Equals(value) = false) Then
				Me.OnversionIdChanging(value)
				Me.SendPropertyChanging
				Me._versionId = value
				Me.SendPropertyChanged("versionId")
				Me.OnversionIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_propertytypeid", DbType:="Int NOT NULL")>  _
	Public Property propertytypeid() As Integer
		Get
			Return Me._propertytypeid
		End Get
		Set
			If ((Me._propertytypeid = value)  _
						= false) Then
				If Me._cmsPropertyType.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnpropertytypeidChanging(value)
				Me.SendPropertyChanging
				Me._propertytypeid = value
				Me.SendPropertyChanged("propertytypeid")
				Me.OnpropertytypeidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dataInt", DbType:="Int")>  _
	Public Property dataInt() As System.Nullable(Of Integer)
		Get
			Return Me._dataInt
		End Get
		Set
			If (Me._dataInt.Equals(value) = false) Then
				Me.OndataIntChanging(value)
				Me.SendPropertyChanging
				Me._dataInt = value
				Me.SendPropertyChanged("dataInt")
				Me.OndataIntChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dataDate", DbType:="DateTime")>  _
	Public Property dataDate() As System.Nullable(Of Date)
		Get
			Return Me._dataDate
		End Get
		Set
			If (Me._dataDate.Equals(value) = false) Then
				Me.OndataDateChanging(value)
				Me.SendPropertyChanging
				Me._dataDate = value
				Me.SendPropertyChanged("dataDate")
				Me.OndataDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dataNvarchar", DbType:="NVarChar(500)")>  _
	Public Property dataNvarchar() As String
		Get
			Return Me._dataNvarchar
		End Get
		Set
			If (String.Equals(Me._dataNvarchar, value) = false) Then
				Me.OndataNvarcharChanging(value)
				Me.SendPropertyChanging
				Me._dataNvarchar = value
				Me.SendPropertyChanged("dataNvarchar")
				Me.OndataNvarcharChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dataNtext", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property dataNtext() As String
		Get
			Return Me._dataNtext
		End Get
		Set
			If (String.Equals(Me._dataNtext, value) = false) Then
				Me.OndataNtextChanging(value)
				Me.SendPropertyChanging
				Me._dataNtext = value
				Me.SendPropertyChanged("dataNtext")
				Me.OndataNtextChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dataDecimal", DbType:="Decimal(20,9)")>  _
	Public Property dataDecimal() As System.Nullable(Of Decimal)
		Get
			Return Me._dataDecimal
		End Get
		Set
			If (Me._dataDecimal.Equals(value) = false) Then
				Me.OndataDecimalChanging(value)
				Me.SendPropertyChanging
				Me._dataDecimal = value
				Me.SendPropertyChanged("dataDecimal")
				Me.OndataDecimalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="cmsPropertyType_cmsPropertyData", Storage:="_cmsPropertyType", ThisKey:="propertytypeid", OtherKey:="id", IsForeignKey:=true)>  _
	Public Property cmsPropertyType() As cmsPropertyType
		Get
			Return Me._cmsPropertyType.Entity
		End Get
		Set
			Dim previousValue As cmsPropertyType = Me._cmsPropertyType.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._cmsPropertyType.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._cmsPropertyType.Entity = Nothing
					previousValue.cmsPropertyDatas.Remove(Me)
				End If
				Me._cmsPropertyType.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.cmsPropertyDatas.Add(Me)
					Me._propertytypeid = value.id
				Else
					Me._propertytypeid = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("cmsPropertyType")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.cmsContentXml")>  _
Partial Public Class cmsContentXml
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _nodeId As Integer
	
	Private _xml As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnnodeIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnnodeIdChanged()
    End Sub
    Partial Private Sub OnxmlChanging(value As String)
    End Sub
    Partial Private Sub OnxmlChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nodeId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property nodeId() As Integer
		Get
			Return Me._nodeId
		End Get
		Set
			If ((Me._nodeId = value)  _
						= false) Then
				Me.OnnodeIdChanging(value)
				Me.SendPropertyChanging
				Me._nodeId = value
				Me.SendPropertyChanged("nodeId")
				Me.OnnodeIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_xml", DbType:="NText NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property xml() As String
		Get
			Return Me._xml
		End Get
		Set
			If (String.Equals(Me._xml, value) = false) Then
				Me.OnxmlChanging(value)
				Me.SendPropertyChanging
				Me._xml = value
				Me.SendPropertyChanged("xml")
				Me.OnxmlChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
